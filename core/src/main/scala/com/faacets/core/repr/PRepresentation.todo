package com.faacets.core
package repr

import spire.math.Rational

import scalin.immutable.dense._
import scalin.syntax.all._

case object SPRepresentation extends SignalingRepresentation {

  val abbrev = "SP"
  val longName = "Signaling Probabilities"
  val alternatives = Seq("Full Probabilities", "Signaling Probability", "Full Probability")

  def corrMatrix(party: Party) = eye[Rational](party.shapeP.size)
  def exprMatrix(party: Party) = eye[Rational](party.shapeP.size)

  implicit val exprConversion = new ExprConversion[this.type](p => eye[Rational](p.shapeP.size))
  implicit val corrConversion = new CorrConversion[this.type](p => eye[Rational](p.shapeP.size))

}

case object NPRepresentation extends NonSignalingRepresentation {

  val abbrev = "NP"
  val longName = "Non-signaling Probabilities"
  val alternatives = Seq("Non-signaling Probability")

  def corrMatrix(party: Party) = eye[Rational](party.shapeP.size)
  def exprMatrix(party: Party) = eye[Rational](party.shapeP.size)

  implicit val exprConversion = new ExprConversion[this.type](p => eye[Rational](p.shapeP.size))
  implicit val corrConversion = new CorrConversion[this.type](p => eye[Rational](p.shapeP.size))

}
