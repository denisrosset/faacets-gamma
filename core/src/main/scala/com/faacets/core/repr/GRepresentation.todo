package com.faacets.core
package repr

import scalin.immutable.Vec

import scalin.immutable.dense._

case object SGRepresentation extends SignalingRepresentation {

  val abbrev = "SG"
  val longName = "Signaling Collins-Gisin"
  val alternatives = Seq("Full Collins-Gisin")

  def corrMatrix(party: Party) = party.matrices.matSGfromSP
  def exprMatrix(party: Party) = party.matrices.matSPfromSG.t

  implicit val exprConversion = new ExprConversion[this.type](p => p.matrices.matSGfromSP.t)
  implicit val corrConversion = new CorrConversion[this.type](p => p.matrices.matSPfromSG)

}

case object NGRepresentation extends NonSignalingRepresentation {

  val abbrev = "NG"
  val longName = "Non-signaling Collins-Gisin"
  val alternatives = Seq.empty[String]

  def corrMatrix(party: Party) = party.matrices.matNGfromSG * party.matrices.matSGfromSP
  def exprMatrix(party: Party) = (party.matrices.matSPfromSG * party.matrices.matSGfromNG).t

  implicit val exprConversion = new ExprConversion[this.type](p => (p.matrices.matNGfromSG * p.matrices.matSGfromSP).t)
  implicit val corrConversion = new CorrConversion[this.type](p => p.matrices.matSPfromSG * p.matrices.matSGfromNG)

}
