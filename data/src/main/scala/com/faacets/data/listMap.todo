TODO

Restore the ListMap JSON decoder, used when deserializing bounds.

import argonaut._, Argonaut._

/**
  * Deserializer for ListMap[String,V] types.
  */
final class ListMapStringDecodeJson[V:DecodeJson] extends DecodeJson[ListMap[String, V]] {

  def decode(a: HCursor) = a.fields match {
    case None => DecodeResult.fail("[V]ListMap[String, V]", a.history)
    case Some(s) =>

      def spin(x: List[JsonField], m: DecodeResult[ListMap[String, V]]): DecodeResult[ListMap[String, V]] =
        x match {
          case Nil => m
          case hd :: tl =>
            spin(tl, m.flatMap(mm => a.get(hd)(DecodeJson.of[V]).map(v => mm + (hd -> v))))
        }

      spin(s, DecodeResult.ok(ListMap.empty[String, V]))

  }

 }


  implicit def listMapStringEncodeJson[V:EncodeJson]: EncodeJson[ListMap[String, V]] =
    EncodeJson[ListMap[String, V]](lm => Json.obj(lm.toSeq.map { case (k, v) => (k, EncodeJson.of[V].encode(v)) }: _*))

  implicit def listMapStringDecodeJson[V:DecodeJson]: DecodeJson[ListMap[String, V]] =
    new ListMapStringDecodeJson[V]
