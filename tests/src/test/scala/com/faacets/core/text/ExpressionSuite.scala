package com.faacets
package core
package text

class ExpressionSuite extends FaacetsSuite {


  val valid =
    Table(
      "scenario" -> "expression",
      "[(2 2) (2 2)]" -> "1/2 <A0> + 1/2",
      "[(2 2) (2 2)]" -> "1/2 * <A0> - 1/2",
      "[(2 2) (3 2)]" -> "P(1,2|1,0)",
      "[(3 2) (2 2)]" -> "P(0,0|0,0) + P(0,0|0,1) + P(0,0|1,0) + P(0,0|1,1)-P(0,1|0,0) + P(0,1|0,1) + P(0,1|1,0) + P(0,1|1,1) -P(1,0|0,0) +      P(1,0|0,1) + P(1,0|1,0) + P(1,0|1,1)-P(1,1|0,0) + P(1,1|0,1) + P(1,1|1,0) + P(1,1|1,1)+P(2,0|0,0) + P(2,0|0,1) -P(2,1|0,0) + P(2,1|0,1)",
      "[(2 2) (2 2)]" -> "P(0,0|0,0) + P(0,0|0,0)",
      "[(2 2) (2 2)]" -> "3P(0,0|0,0) - 3*P(0,0|0,0)",
      "[(2 2) (2 2)]" -> "3/5P(0,0|0,0) - 3/5*P(0,0|0,0)",
      "[(2 2) (2 2) (2 2) (2 2)]" -> "3/5P(0,0,0,0|0,0,0,0) - 3/5*P(0,0,0,0|0,0,0,1)",
      "[(2 2) (3 2)]" -> "PAB(0,1|0,0)",
      "[(3 2) (2 2)]" -> "PAB(0,0|0,0) + PAB(0,0|0,1) + PAB(0,0|1,0) + PAB(0,0|1,1)-PAB(0,1|0,0) + PAB(0,1|0,1) + PAB(0,1|1,0) + PAB(0,1|1,1) -PAB(1,0|0,0) +      PAB(1,0|0,1) + PAB(1,0|1,0) + PAB(1,0|1,1)-PAB(1,1|0,0) + PAB(1,1|0,1) + PAB(1,1|1,0) + PAB(1,1|1,1)+PAB(2,0|0,0) + PAB(2,0|0,1) -PAB(2,1|0,0) + PAB(2,1|0,1)",
      "[(2 2) (2 2)]" -> "PAB(0,0|0,0) + PAB(0,0|0,0)",
      "[(2 2) (2 2)]" -> "3PAB(0,0|0,0) - 3*PAB(0,0|0,0)",
      "[(2 2) (2 2)]" -> "3/5PAB(0,0|0,0) - 3/5*PAB(0,0|0,0)",
      "[(2 2) (2 2) (2 2) (2 2)]" -> "3/5PAB(0,0,0,0|0,0,0,0) - 3/5*PAB(0,0,0,0|0,0,0,1)",
      "[(2 2) (2 2)]" -> "PA(1|1)",
      "[(2 2) (2 2)]" -> "PB(1|1)"
    )

  val invalid =
    Table(
      "scenario" -> "expression",
      "[(2 2) (2 2)]" -> "P(0|0)",
      "[(2 2) (2 2)]" -> "P(1,2|1,1)",
      "[(2 2) (2 2)]" -> "P(00|00)",
      "[(2 2) (2 2)]" -> "P(0 0|0 0)",
      "[(2 2) (2 2)]" -> "P(0,0|00)",
      "[(2 2) (2 2)]" -> "P(0,0,0,0)",
      "[(2 2) (2 2)]" -> "P(0,0|0,0) + +P(0,0|0,0)",
      "[(2 2) (2 2) (2 2)]" -> "3/5P(0,0|0,0) - 3/5*P(0,0|0,0)",
      "[(2 2) (2 2) (2 2)]" -> "P(0,0|0,0,0)",
      "[(2 2) (2 2) (2 2)]" -> "P(0,0,0|0,0)",
      "[(2 2) (2 2)]" -> "PAB(0|0)",
      "[(2 2) (2 2)]" -> "PAB(1,2|1,1)",
      "[(2 2) (2 2)]" -> "PAB(00|00)",
      "[(2 2) (2 2)]" -> "PAB(0 0|0 0)",
      "[(2 2) (2 2)]" -> "PAB(0,0|00)",
      "[(2 2) (2 2)]" -> "PAB(0,0,0,0)",
      "[(2 2) (2 2)]" -> "PAB(0,0|0,0) + +PAB(0,0|0,0)",
      "[(2 2) (2 2) (2 2)]" -> "3/5PAB(0,0|0,0) - 3/5*PAB(0,0|0,0)",
      "[(2 2) (2 2) (2 2)]" -> "PAB(0,0|0,0,0)",
      "[(2 2) (2 2) (2 2)]" -> "PAB(0,0,0|0,0)",
      "[(2 2) (2 2)]" -> "P_AB(1,1|1,1)",
      "[(2 2) (2 2)]" -> "P_A(1,1|1,1)",
      "[(2 2) (2 2)]" -> "P_{AB}(1,1|1,1)",
      "[(2 2) (2 2)]" -> "P^AB(1,1|1,1)",
      "[(2 2) (2 2)]" -> "P^{AB}(1,1|1,1)",
      "[(2 2) (2 2)]" -> "P_A(1|1)",
      "[(2 2) (2 2)]" -> "P^A(1|1)"
    )

  test("Valid examples") {
    forAll(valid) { (scenario: String, expr: String) =>
      DExpr.parseExpression(scenario.parseUnsafe[Scenario], expr).fold(_.toList, x => List.empty[String]) shouldBe List.empty[String]
    }
  }

  test("Invalid examples") {
    forAll(invalid) { (scenario: String, expr: String) =>
      DExpr.parseExpression(scenario.parseUnsafe[Scenario], expr).isValid shouldBe false
    }
  }


}
